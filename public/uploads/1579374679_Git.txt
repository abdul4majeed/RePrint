################################################################Chapter 1################################################################
Old Version are RCL,VCS and new version is DVCS
RCL is just local db storing.
VCS is a single server storage.
DVGS is combination of both local and server.
Git has 3 working areas:
1.Commit (Locally store the data into the git database.)
2.Stage (This is the current files which will be stored as a snapshot in the git local database)
2.Working Tree (Single Snapshot of the commited area where we can work with the files)

Commands.
******************************************************  Configruation Settings ************************************************
Git uses the 3 places to load the configuration files.
system, local and global which can be seen by runing this command
------------------------------------------------------$ git config

You can view all of your settings and where they are coming from using:
------------------------------------------------------$ git config --list --show-origin

The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit 
uses this information, and it’s immutably baked into the commits you start creating:
---------------------------$ git config --global user.name "John Doe"
---------------------------$ git config --global user.email johndoe@example.com
Again, you need to do this only once if you pass the --global option, because then Git will always use that information for anything you do
on that system. If you want to override this with a different name or email address for specific projects, you can run the command without
the --global option when you’re in that project.

If you want to set a text editor, such as Emacs, you can do the following:
---------------------------$ git config --global core.editor name/full folder path
For Example $ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"

If you want to check your configuration settings, you can use the git config --list command to list all the settings Git can find at that point:
---------------------------$git config --list

You can also check what Git thinks a specific key’s value is by typing git config <key>:
---------------------------$git config user.name
******************************************************  Help  ************************************************
If you ever need help while using Git, then use
---------------------------$ git help <verb>      
                                                     OR
---------------------------$ git <verb> --help
                                                     OR
---------------------------$ git <verb> --h

################################################################Chapter 2################################################################

***************************************************** Getting/initalizing a Git Repository *******************************
Step. Go to the folder directory and run the following command to initalize the Fresh Git Repository.
---------------------------$ git init
Cloning an Existing Repository
Step. Write the following command on the command prompt to download/clone the repository.
---------------------------$ git clone url custom_folder_name

Remember that each file in your working directory can be in one of two states: tracked or untracked. 
When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven’t edited anything.
As you edit files, Git sees them as modified, because you’ve changed them since your last commit. As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.
******************************************************Checking the Status of Your Files******************************************************
Check the status of the file using 
---------------------------$ git status
Untracked basically means that Git sees a file you didn’t have in the previous snapshot (commit);
*****************************************************Tracking New Files****************************************************
In order to begin tracking a new file, you use the command 
---------------------------$ git add file_name
If you run your status command again, you can see that your README file is now tracked and staged to be committed.You can tell that it’s staged because it’s under the “Changes to be committed” heading.
*****************************************************Staging Modified Files***************************************************
Every file must be add after edit.
*****************************************************Short Status*************************************************************
While the git status output is pretty comprehensive, it’s also quite wordy. Git also has a short status flag so you can see your changes in a more compact way. If you run the following commands you get a far more simplified output from the command:
---------------------------$ git status -s 
                                                OR
---------------------------$ git status --short 
New files that aren’t tracked have a ?? next to them, 
new files that have been added to the staging area have an A,
 modified files have an M and so on. 
 There are two columns to the output — the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree. 
 So for example in that output, the README file is modified in the working directory but not yet staged, while the lib/simplegit.rb file is modified and staged. 
 The Rakefile was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.
*****************************************************Ignoring Files***********************************************************
you can create a file listing patterns to match them named .gitignore. 
Example and Rules can be found at https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository
*****************************************************Viewing Your Staged and Unstaged Changes*********************************
you want to know exactly what you changed, not just which files were changed — you can use the git diff command.
Although git status answers those questions very generally by listing the file names, git diff shows you the exact lines added and removed — the patch, as it were.
That command compares what is in your working directory with what is in your staging area. The result tells you the changes you’ve made that you haven’t yet staged.
If you want to see what you’ve staged that will go into your next commit, you can use following command. This command compares your staged changes to your last commit:
------------------------------$git diff --staged/--cached
It’s important to note that git diff by itself doesn’t show all changes made since your last commit — only changes that are still unstaged.
If you’ve staged all of your changes, git diff will give you no output.
git diff only show the difference when one file is staged i.e. with command git add and another file is in untracked i.e. not add in staged using the git add command.
*****************************************************Committing Your Changes**************************************************
------------------------------$git commit -m "message"
*****************************************************Skipping the Staging Area************************************************
------------------------------$git commit -a -m "message"
*****************************************************Removing Files***********************************************************
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The git rm command does that, and also removes the file from your working directory so you don’t see it as an untracked file the next time around.
If you simply remove the file from your working directory, it shows up under the “Changes not staged for commit” (that is, unstaged) area of your git status output:
Then, if you run git rm, it stages the file’s removal:
If you modified the file or had already added it to the staging area, you must force the removal with the -f option.
Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area. In other words, you may want to keep the file on your hard drive but not have Git track it anymore. 
-------------------------------$ git rm --cached README
*****************************************************Moving Files**************************************************************
It’s a bit confusing that Git has a mv command. If you want to rename a file in Git, you can run something like:

-------------------------------$ git mv file_from file_to
and it works fine. In fact, if you run something like this and look at the status, you’ll see that Git considers it a renamed file:
*****************************************************Viewing the Commit History*************************************************
You can get the commit history by runing the following command
-------------------------------$ git log
By default, with no arguments, git log lists the commits made in that repository in reverse chronological order; that is, the most recent commits show up first.
-------------------------------$ git log -p -2
One of the more helpful options is -p or --patch, which shows the difference (the patch output) introduced in each commit. You can also limit the number of log entries displayed, such as using -2 to show only the last two entries.
-------------------------------$ git log --stat
For example, if you want to see some abbreviated stats for each commit, you can use the --stat option:
As you can see, the --stat option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed. It also puts a summary of the information at the end.
-------------------------------$ git log --pretty=oneline
Another really useful option is --pretty. This option changes the log output to formats other than the default. A few prebuilt options are available for you to use. The oneline option prints each commit on a single line, which is useful if you’re looking at a lot of commits. In addition, the short, full, and fuller options show the output in roughly the same format but with less or more information, respectively:
-------------------------------$ git log --pretty=format:"%h - %an, %ar : %s"
The most interesting option is format, which allows you to specify your own log output format. This is especially useful when you’re generating output for machine parsing — because you specify the format explicitly, you know it won’t change with updates to Git:
More Formate Can  Be Found Here:
https://git-scm.com/book/en/v2/ch00/pretty_format

You may be wondering what the difference is between author and committer. The author is the person who originally wrote the work, whereas the committer is the person who last applied the work. So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit — you as the author, and the core member as the committer.

---------------------------------$ git log --pretty=format:"%h %s" --graph

The oneline and format options are particularly useful with another log option called --graph. This option adds a nice little ASCII graph showing your branch and merge history:

Other log arguments can be found here at:
https://git-scm.com/book/en/v2/ch00/log_options
****************************************************Limiting Log Output********************************************************
However, the time-limiting options such as --since and --until are very useful. For example, this command gets the list of commits made in the last two weeks:
----------------------------------$ git log --since=2.weeks
This command works with lots of formats — you can specify a specific date like "2008-01-15", or a relative date such as "2 years 1 day 3 minutes ago".

You can also filter the list to commits that match some search criteria. The --author option allows you to filter on a specific author, and the --grep option lets you search for keywords in the commit messages.
You can specify more than one instance of both the --author and --grep search criteria, which will limit the commit output to commits that match any of the --author patterns and any of the --grep patterns; however, adding the --all-match option further limits the output to just those commits that match all --grep patterns.

Another really helpful filter is the -S option (colloquially referred to as Git’s “pickaxe” option), which takes a string and shows only those commits that changed the number of occurrences of that string. For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:

----------------------------------$$ git log -S function_name
The last really useful option to pass to git log as a filter is a path. If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files. This is always the last option and is generally preceded by double dashes (--) to separate the paths from the options.

More Time Limited Commands can be found here at 
https://git-scm.com/book/en/v2/ch00/limit_options

 if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano in the month of October 2008 and are not merge commits, you can run something like this:

----------------------------------$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \ --before="2008-11-01" --no-merges -- t/
Preventing the display of merge commits
Depending on the workflow used in your repository, it’s possible that a sizable percentage of the commits in your log history are just merge commits, which typically aren’t very informative. To prevent the display of merge commits cluttering up your log history, simply add the log option --no-merges.
****************************************************Undoing Things**************************************************************
----------------------------------$ git commit --amend
At any stage, you may want to undo something. Here, we’ll review a few basic tools for undoing changes that you’ve made. Be careful, because you can’t always undo some of these undos. This is one of the few areas in Git where you may lose some work if you do it wrong.
One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message. If you want to redo that commit, make the additional changes you forgot, stage them, and commit again using the --amend option:
This command takes your staging area and uses it for the commit. If you’ve made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you’ll change is your commit message.

As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:

----------------------------------$ git commit -m 'initial commit'
----------------------------------$ git add forgotten_file
----------------------------------$ git commit --amend
You end up with a single commit — the second commit replaces the results of the first.

It’s important to understand that when you’re amending your last commit, you’re not so much fixing it as replacing it entirely with a new, improved commit that pushes the old commit out of the way and puts the new commit in its place. Effectively, it’s as if the previous commit never happened, and it won’t show up in your repository history.The obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository history with commit messages of the form, “Oops, forgot to add a file” or “Darn, fixing a typo in last commit”.
***************************************************Unstaging a Staged File*********************************************************
The next two sections demonstrate how to work with your staging area and working directory changes. The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them. For example, let’s say you’ve changed two files and want to commit them as two separate changes, but you accidentally type git add * and stage them both. How can you unstage one of the two? The git status command reminds you:
Right below the “Changes to be committed” text, it says use git reset HEAD <file>... to unstage. So, let’s use that advice to unstage the CONTRIBUTING.md file:
----------------------------------$ git reset HEAD CONTRIBUTING.md
The command is a bit strange, but it works. The CONTRIBUTING.md file is modified but once again unstaged.
It’s true that git reset can be a dangerous command, especially if you provide the --hard flag. However, in the scenario described above, the file in your working directory is not touched, so it’s relatively safe.
****************************************************Unmodifying a Modified File*****************************************************
What if you realize that you don’t want to keep your changes to the CONTRIBUTING.md file? How can you easily unmodify it — revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)? Luckily, git status tells you how to do that, too. In the last example output, the unstaged area looks like this:
It tells you pretty explicitly how to discard the changes you’ve made. Let’s do what it says:
----------------------------------$ git checkout -- CONTRIBUTING.md
It’s important to understand that git checkout -- <file> is a dangerous command. Any local changes you made to that file are gone — Git just replaced that file with the most recently-committed version. Don’t ever use this command unless you absolutely know that you don’t want those unsaved local changes.
If you would like to keep the changes you’ve made to that file but still need to get it out of the way for now, we’ll go over stashing and branching in Git Branching; these are generally better ways to go.Remember, anything that is committed in Git can almost always be recovered. Even commits that were on branches that were deleted or commits that were overwritten with an --amend commit can be recovered (see Data Recovery for data recovery). However, anything you lose that was never committed is likely never to be seen again.
****************************************************Working with Remotes*****************************************************
To be able to collaborate on any Git project, you need to know how to manage your remote repositories. Remote repositories are versions of your project that are hosted on the Internet or network somewhere. You can have several of them, each of which generally is either read-only or read/write for you. Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work. Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more. In this section, we’ll cover some of these remote-management skills.
Note
Remote repositories can be on your local machine.
***************************************************Showing Your Remotes*******************************************************
To see which remote servers you have configured, you can run the git remote command. 
-----------------------------------$ git remote
It lists the shortnames of each remote handle you’ve specified. If you’ve cloned your repository, you should at least see origin — that is the default name Git gives to the server you cloned from.
You can also specify -v, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:
-----------------------------------$ git remote -v
***************************************************Adding Remote Repositories**************************************************
We’ve mentioned and given some demonstrations of how the git clone command implicitly adds the origin remote for you. Here’s how to add a new remote explicitly. To add a new remote Git repository as a shortname you can reference easily, run git remote add <shortname> <url>.
-----------------------------------$ git remote add pb https://github.com/paulboone/ticgit
Now you can use the string pb on the command line in lieu of the whole URL. For example, if you want to fetch all the information that Paul has but that you don’t yet have in your repository, you can run git fetch pb:
-----------------------------------$ git fetch pb
***************************************************Fetching and Pulling from Your Remotes**************************************************
As you just saw, to get data from your remote projects, you can run:
-----------------------------------$ git fetch <remote>
The command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet. After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.
If you clone a repository, the command automatically adds that remote repository under the name “origin”. So, git fetch origin fetches any new work that has been pushed to that server since you cloned (or last fetched from) it. It’s important to note that the git fetch command only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.
If your current branch is set up to track a remote branch (see the next section and Git Branching for more information), you can use the git pull command to automatically fetch and then merge that remote branch into your current branch. This may be an easier or more comfortable workflow for you; and by default, the git clone command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from. Running git pull generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on.
***************************************************Pushing to Your Remotes********************************************************
The command for this is simple: git push <remote> <branch>. If you want to push your master branch to your origin server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you’ve done back up to the server:
-----------------------------------$ git push origin master
This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime. If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected. You’ll have to fetch their work first and incorporate it into yours before you’ll be allowed to push.
***************************************************Inspecting a Remote********************************************************
If you want to see more information about a particular remote, you can use the git remote show <remote> command.
-----------------------------------$git remote show origin
It lists the URL for the remote repository as well as the tracking branch information. The command helpfully tells you that if you’re on the master branch and you run git pull, it will automatically merge in the master branch on the remote after it fetches all the remote references. It also lists all the remote references it has pulled down.That is a simple example you’re likely to encounter. When you’re using Git more heavily, however, you may see much more information from git remote show.This command shows which branch is automatically pushed to when you run git push while on certain branches. It also shows you which remote branches on the server you don’t yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you run git pull.
***************************************************Renaming and Removing Remotes********************************************************
You can run git remote rename to change a remote’s shortname. For instance, if you want to rename pb to paul, you can do so with git remote rename:
-----------------------------------$ git remote rename pb paul
It’s worth mentioning that this changes all your remote-tracking branch names, too. What used to be referenced at pb/master is now at paul/master.
If you want to remove a remote for some reason — you’ve moved the server or are no longer using a particular mirror, or perhaps a contributor isn’t contributing anymore — you can either use git remote remove or git remote rm:
-----------------------------------$ git remote remove paul
Once you delete the reference to a remote this way, all remote-tracking branches and configuration settings associated with that remote are also deleted.
***************************************************Tagging*******************************************************************************
Like most VCSs, Git has the ability to tag specific points in a repository’s history as being important. Typically, people use this functionality to mark release points (v1.0, v2.0 and so on).

***************************************************Listing Your Tags***********************************************************************
Listing the existing tags in Git is straightforward. Just type git tag (with optional -l or --list):
-----------------------------------$ git tag
This command lists the tags in alphabetical order; the order in which they are displayed has no real importance.
You can also search for tags that match a particular pattern. The Git source repo, for instance, contains more than 500 tags. If you’re interested only in looking at the 1.8.5 series, you can run this:
-----------------------------------$ git tag -l "v1.8.5*"
Listing tag wildcards requires -l or --list option
If you want just the entire list of tags, running the command git tag implicitly assumes you want a listing and provides one; the use of -l or --list in this case is optional.
If, however, you’re supplying a wildcard pattern to match tag names, the use of -l or --list is mandatory
*************************************************** Creating Tags ***********************************************************************
Git supports two types of tags: lightweight and annotated.

A lightweight tag is very much like a branch that doesn’t change — it’s just a pointer to a specific commit.

Annotated tags, however, are stored as full objects in the Git database. They’re checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG). It’s generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don’t want to keep the other information, lightweight tags are available too.

************************************************** Annotated Tags ************************************************************************
Creating an annotated tag in Git is simple. The easiest way is to specify -a when you run the tag command:
-----------------------------------$ git tag -a v1.4 -m "my version 1.4"
The -m specifies a tagging message, which is stored with the tag. If you don’t specify a message for an annotated tag, Git launches your editor so you can type it in.
You can see the tag data along with the commit that was tagged by using the git show command:
-----------------------------------$ git show v1.4
That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.
************************************************** Lightweight Tags ************************************************************************
Another way to tag commits is with a lightweight tag. This is basically the commit checksum stored in a file — no other information is kept. To create a lightweight tag, don’t supply any of the -a, -s, or -m options, just provide a tag name:
-----------------------------------$ git tag v1.4-lw
This time, if you run git show on the tag, you don’t see the extra tag information. The command just shows the commit:
-----------------------------------$ git show v1.4-lw
************************************************** Tagging Later ************************************************************************
You can also tag commits after you’ve moved past them. Suppose your commit history looks like this:

-----------------------------------$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
Now, suppose you forgot to tag the project at v1.2, which was at the “updated rakefile” commit. You can add it after the fact. To tag that commit, you specify the commit checksum (or part of it) at the end of the command:

-----------------------------------$ git tag -a v1.2 9fceb02
You can see that you’ve tagged the commit:

-----------------------------------$ git tag
-----------------------------------$ git show v1.2
************************************************** Sharing Tags ************************************************************************
By default, the git push command doesn’t transfer tags to remote servers. You will have to explicitly push tags to a shared server after you have created them. This process is just like sharing remote branches — you can run git push origin <tagname>.

-----------------------------------$ git push origin v1.5
If you have a lot of tags that you want to push up at once, you can also use the --tags option to the git push command. This will transfer all of your tags to the remote server that are not already there.

-----------------------------------$ git push origin --tags
Now, when someone else clones or pulls from your repository, they will get all your tags as well.
Note:
git push pushes both types of tags
Pushing tags using git push <remote> --tags does not distinguish between lightweight and annotated tags; there is no simple option that allows you to select just one type for pushing.

************************************************** Deleting Tags ************************************************************************
To delete a tag on your local repository, you can use git tag -d <tagname>. For example, we could remove our lightweight tag above as follows:
-----------------------------------$ git tag -d v1.4-lw
Note that this does not remove the tag from any remote servers. There are two common variations for deleting a tag from a remote server.
The first variation is git push <remote> :refs/tags/<tagname>:
-----------------------------------$ git push origin :refs/tags/v1.4-lw
The way to interpret the above is to read it as the null value before the colon is being pushed to the remote tag name, effectively deleting it.
The second (and more intuitive) way to delete a remote tag is with:
-----------------------------------$ git push origin --delete <tagname>
************************************************** Checking out Tags ************************************************************************
If you want to view the versions of files a tag is pointing to, you can do a git checkout of that tag, although this puts your repository in “detached HEAD” state, which has some ill side effects:

-----------------------------------$ git checkout 2.0.0

In “detached HEAD” state, if you make changes and then create a commit, the tag will stay the same, but your new commit won’t belong to any branch and will be unreachable, except by the exact commit hash. Thus, if you need to make changes — say you’re fixing a bug on an older version, for instance — you will generally want to create a branch:

-----------------------------------$ git checkout -b version2 v2.0.0

If you do this and make a commit, your version2 branch will be slightly different than your v2.0.0 tag since it will move forward with your new changes, so do be careful.
************************************************** Git Aliases ************************************************************************
Git doesn’t automatically infer your command if you type it in partially. If you don’t want to type the entire text of each of the Git commands, you can easily set up an alias for each command using git config. Here are a couple of examples you may want to set up:

-----------------------------------$ git config --global alias.co checkout
-----------------------------------$ git config --global alias.br branch
-----------------------------------$ git config --global alias.ci commit
-----------------------------------$ git config --global alias.st status
This means that, for example, instead of typing git commit, you just need to type git ci. As you go on using Git, you’ll probably use other commands frequently as well; don’t hesitate to create new aliases.

This technique can also be very useful in creating commands that you think should exist. For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:

-----------------------------------$ git config --global alias.unstage 'reset HEAD --'
This makes the following two commands equivalent:

-----------------------------------$ git unstage fileA
-----------------------------------$ git reset HEAD -- fileA
This seems a bit clearer. It’s also common to add a last command, like this:

-----------------------------------$ git config --global alias.last 'log -1 HEAD'
This way, you can see the last commit easily:

-----------------------------------$ git last

As you can tell, Git simply replaces the new command with whatever you alias it for. However, maybe you want to run an external command, rather than a Git subcommand. In that case, you start the command with a ! character. This is useful if you write your own tools that work with a Git repository. We can demonstrate by aliasing git visual to run gitk:

-----------------------------------$ git config --global alias.visual '!gitk'

################################################################Chapter 3################################################################











































